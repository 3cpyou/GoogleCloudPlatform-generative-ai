{
  "generated_at": "2025-09-09T10:33:15.848046+00:00",
  "count": 20,
  "items": [
    {
      "index": 1,
      "question": "Show me the latest email from brenda@statpackkzn.co.za to Julie.",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM `email_search_index` WHERE fromEmail = 'brenda@statpackkzn.co.za' AND 'julie' IN UNNEST(toPeople) ORDER BY sentAt DESC LIMIT 1;",
        "translated_sdk_code": "docs = db.collection('email_search_index').where('fromEmail', '==', 'brenda@statpackkzn.co.za').where('toPeople', 'array_contains', 'julie').order_by('sentAt', direction=firestore.Query.DESCENDING).limit(1).stream()\nfor doc in docs:\n    print(doc.id, doc.to_dict())",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "2023-10-01T00:00:00Z"
      }
    },
    {
      "index": 2,
      "question": "Did brendan@lightco.co.za email me in the last 7 days? If yes, what was the subject?",
      "sdk_json": {
        "from_sql": "SELECT subject, messageId, threadId, fromEmail, sentAt, snippet FROM email_search_index WHERE fromEmail = 'brendan@lightco.co.za' AND sentAt >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY) ORDER BY sentAt DESC LIMIT 1;",
        "translated_sdk_code": "docs = db.collection('email_search_index').where('fromEmail', '==', 'brendan@lightco.co.za').where('sentAt', '>=', firestore.firestore.Timestamp.now() - timedelta(days=7)).order_by('sentAt', direction=firestore.Query.DESCENDING).limit(1).stream()\nfor doc in docs:\n    print(doc.to_dict()['subject'])",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "2023-10-08T12:00:00Z"
      }
    },
    {
      "index": 3,
      "question": "List unread emails from adrian@rancilio.co.za mentioning ‘invoice’ from the past month.",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM email_search_index WHERE fromEmail = 'adrian@rancilio.co.za' AND bodySearchable LIKE '%invoice%' AND isUnread = true AND sentAt >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH) ORDER BY sentAt DESC LIMIT 1;",
        "translated_sdk_code": "docs = db.collection('email_search_index').where('fromEmail', '==', 'adrian@rancilio.co.za').where('bodySearchable', '>=', 'invoice').where('isUnread', '==', True).where('sentAt', '>=', firestore.firestore.Timestamp.now() - timedelta(days=30)).order_by('sentAt', direction=firestore.Query.DESCENDING).limit(1).stream()\nfor doc in docs:\n    print(doc.to_dict())",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "2023-10-08T00:00:00Z"
      }
    },
    {
      "index": 4,
      "question": "Find the most recent thread that includes both accounts@toscant.co.za and julie@lineagecoffee.com.",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM email_search_index WHERE 'julie' IN UNNEST(toPeople) AND 'accounts@toscant.co.za' IN UNNEST(toEmails) ORDER BY sentAt DESC LIMIT 1;",
        "translated_sdk_code": "docs = db.collection('email_search_index')\n        .where('toPeople', 'array_contains', 'julie')\n        .where('toEmails', 'array_contains', 'accounts@toscant.co.za')\n        .order_by('sentAt', direction=firestore.Query.DESCENDING)\n        .limit(1)\n        .stream()",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "2023-10-01T00:00:00Z"
      }
    },
    {
      "index": 5,
      "question": "Pull all emails from accounts@vervewater.co.za with attachments in the last 30 days.",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM email_search_index WHERE fromEmail = 'accounts@vervewater.co.za' AND hasAttachments = true AND sentAt >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY) ORDER BY sentAt DESC LIMIT 1;",
        "translated_sdk_code": "docs = db.collection('email_search_index').where('fromEmail', '==', 'accounts@vervewater.co.za').where('hasAttachments', '==', True).where('sentAt', '>=', firestore.firestore.Timestamp.now() - timedelta(days=30)).order_by('sentAt', direction=firestore.Query.DESCENDING).limit(1).stream()",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "placeholder"
      }
    },
    {
      "index": 6,
      "question": "Who did accounts@thegourmetgreek.com email at Lineage this week?",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM email_search_index WHERE fromEmail = 'accounts@thegourmetgreek.com' AND 'lineage' IN UNNEST(toPeople) AND sentAt >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY) ORDER BY sentAt DESC LIMIT 1;",
        "translated_sdk_code": "docs = db.collection('email_search_index').where('fromEmail', '==', 'accounts@thegourmetgreek.com').where('toPeople', 'array_contains', 'lineage').where('sentAt', '>=', firestore.firestore.Timestamp.now() - timedelta(days=7)).order_by('sentAt', direction=firestore.Query.DESCENDING).limit(1).get()",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "placeholder"
      }
    },
    {
      "index": 7,
      "question": "Summarize the last 3 messages between administration@midlandsmeander.co.za and Craig.",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM email_search_index WHERE fromEmail = 'administration@midlandsmeander.co.za' AND 'craig' IN UNNEST(allPeople) ORDER BY sentAt DESC LIMIT 3;",
        "translated_sdk_code": "docs = db.collection('email_search_index').where('fromEmail', '==', 'administration@midlandsmeander.co.za').where('allPeople', 'array_contains', 'craig').order_by('sentAt', direction=firestore.Query.DESCENDING).limit(3).stream()\nfor doc in docs:\n    print(doc.to_dict())",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "2023-10-08T12:00:00Z"
      }
    },
    {
      "index": 8,
      "question": "Show all emails today where brendan@lightco.co.za appears anywhere on the thread (to/cc/bcc).",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM email_search_index WHERE 'brendan@lightco.co.za' IN UNNEST(allEmails) AND DATE(sentAt) = CURRENT_DATE() ORDER BY sentAt DESC LIMIT 1;",
        "translated_sdk_code": "docs = db.collection('email_search_index').where('allEmails', 'array_contains', 'brendan@lightco.co.za').where('sentAt', '>=', datetime.datetime.combine(datetime.date.today(), datetime.datetime.min.time())).order_by('sentAt', direction=firestore.Query.DESCENDING).limit(1).stream()",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "2023-10-05T12:00:00Z"
      }
    },
    {
      "index": 9,
      "question": "Get the latest payment-related message from accounts@toscant.co.za to our accounts team.",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM `email_search_index` WHERE fromEmail = 'accounts@toscant.co.za' AND 'accounts' IN UNNEST(toPeople) AND LOWER(subject) LIKE '%payment%' ORDER BY sentAt DESC LIMIT 1;",
        "translated_sdk_code": "docs = db.collection('email_search_index').where('fromEmail', '==', 'accounts@toscant.co.za').where('toPeople', 'array_contains', 'accounts').where('subject', '>=', 'payment').order_by('sentAt', direction=firestore.Query.DESCENDING).limit(1).get()",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "2023-10-08T12:00:00Z"
      }
    },
    {
      "index": 10,
      "question": "Find the last time adrian@rancilio.co.za emailed julie@lineagecoffee.com.",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM email_search_index WHERE fromEmail = 'adrian@rancilio.co.za' AND 'julie@lineagecoffee.com' IN UNNEST(toEmails) ORDER BY sentAt DESC LIMIT 1;",
        "translated_sdk_code": "doc_ref = db.collection('email_search_index').where('fromEmail', '==', 'adrian@rancilio.co.za').where('toEmails', 'array_contains', 'julie@lineagecoffee.com').order_by('sentAt', direction=firestore.Query.DESCENDING).limit(1).get()",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "2023-10-01T12:00:00Z"
      }
    },
    {
      "index": 11,
      "question": "Which of our team replied to accounts@vervewater.co.za most recently?",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM email_search_index WHERE 'accounts@vervewater.co.za' IN UNNEST(toEmails) ORDER BY sentAt DESC LIMIT 1;",
        "translated_sdk_code": "docs = db.collection('email_search_index').where('toEmails', 'array_contains', 'accounts@vervewater.co.za').order_by('sentAt', direction=firestore.Query.DESCENDING).limit(1).stream()\nfor doc in docs:\n    print(doc.to_dict())",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "2023-10-08T12:00:00Z"
      }
    },
    {
      "index": 12,
      "question": "Pull the most recent email that has both brenda@statpackkzn.co.za and accounts@thegourmetgreek.com on it.",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM email_search_index WHERE 'brenda@statpackkzn.co.za' IN UNNEST(toEmails) AND 'accounts@thegourmetgreek.com' IN UNNEST(toEmails) ORDER BY sentAt DESC LIMIT 1;",
        "translated_sdk_code": "docs = db.collection('email_search_index').where('toEmails', 'array_contains', 'brenda@statpackkzn.co.za').where('toEmails', 'array_contains', 'accounts@thegourmetgreek.com').order_by('sentAt', direction=firestore.Query.DESCENDING).limit(1).get()",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "2023-10-08T12:00:00Z"
      }
    },
    {
      "index": 13,
      "question": "Show me threads where administration@midlandsmeander.co.za is involved and the tone sounds urgent.",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM email_search_index WHERE 'administration@midlandsmeander.co.za' IN UNNEST(allEmails) AND (LOWER(subject) LIKE '%urgent%' OR LOWER(snippet) LIKE '%urgent%') ORDER BY sentAt DESC LIMIT 1;",
        "translated_sdk_code": "docs = db.collection('email_search_index').where('allEmails', 'array_contains', 'administration@midlandsmeander.co.za').where('subject', '>=', 'urgent').order_by('sentAt', direction=firestore.Query.DESCENDING).limit(1).stream()\nfor doc in docs:\n    print(doc.id, doc.to_dict())",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "placeholder"
      }
    },
    {
      "index": 14,
      "question": "List all emails in the last month where adrian@rancilio.co.za sent an attachment.",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM email_search_index WHERE fromEmail = 'adrian@rancilio.co.za' AND hasAttachments = true AND sentAt >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH) ORDER BY sentAt DESC;",
        "translated_sdk_code": "docs = db.collection('email_search_index').where('fromEmail', '==', 'adrian@rancilio.co.za').where('hasAttachments', '==', True).where('sentAt', '>=', firestore.firestore.Timestamp.now() - timedelta(days=30)).order_by('sentAt', direction=firestore.Query.DESCENDING).stream()",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "2023-10-08T12:00:00Z"
      }
    },
    {
      "index": 15,
      "question": "Which supplier domain emailed accounts@lineagecoffee.com the most in the last quarter?",
      "sdk_json": {
        "from_sql": "SELECT fromEmail, COUNT(*) as email_count FROM email_search_index WHERE 'lineagecoffee.com' IN UNNEST(toEmails) AND sentAt >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 3 MONTH) GROUP BY fromEmail ORDER BY email_count DESC LIMIT 1;",
        "translated_sdk_code": "from google.cloud import firestore\ndb = firestore.Client()\nquery = db.collection('email_search_index')\nquery = query.where('toEmails', 'array_contains', 'lineagecoffee.com')\nquery = query.where('sentAt', '>=', firestore.firestore.Timestamp.now() - timedelta(days=90))\nquery = query.order_by('sentAt', direction=firestore.Query.DESCENDING)\nquery = query.limit(1)\ndocs = query.stream()",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "2023-10-01T00:00:00Z"
      }
    },
    {
      "index": 16,
      "question": "Find messages where accounts@vervewater.co.za asked for payment, sorted by newest.",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM `email_search_index` WHERE fromEmail = 'accounts@vervewater.co.za' AND bodySearchable LIKE '%payment%' ORDER BY sentAt DESC LIMIT 1;",
        "translated_sdk_code": "docs = db.collection('email_search_index').where('fromEmail', '==', 'accounts@vervewater.co.za').where('bodySearchable', 'array_contains', 'payment').order_by('sentAt', direction=firestore.Query.DESCENDING).limit(1).get()",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "2023-10-01T00:00:00Z"
      }
    },
    {
      "index": 17,
      "question": "Get the latest email from brendan@lightco.co.za that mentions ‘quote’.",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM email_search_index WHERE fromEmail = 'brendan@lightco.co.za' AND 'quote' IN UNNEST(searchTerms) ORDER BY sentAt DESC LIMIT 1;",
        "translated_sdk_code": "docs = db.collection('email_search_index').where('fromEmail', '==', 'brendan@lightco.co.za').where('searchTerms', 'array_contains', 'quote').order_by('sentAt', direction=firestore.Query.DESCENDING).limit(1).get()",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "2023-10-01T12:00:00Z"
      }
    },
    {
      "index": 18,
      "question": "Pull all emails from brenda@statpackkzn.co.za to anyone at Lineage this week.",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM email_search_index WHERE fromEmail = 'brenda@statpackkzn.co.za' AND 'lineagecoffee.com' IN UNNEST(toEmails) AND sentAt >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY) ORDER BY sentAt DESC LIMIT 1;",
        "translated_sdk_code": "docs = db.collection('email_search_index').where('fromEmail', '==', 'brenda@statpackkzn.co.za').where('toEmails', 'array_contains', 'office@lineagecoffee.com').where('sentAt', '>=', firestore.firestore.Timestamp.now() - timedelta(days=7)).order_by('sentAt', direction=firestore.Query.DESCENDING).limit(1).stream()",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "placeholder"
      }
    },
    {
      "index": 19,
      "question": "Find emails in the last 24 hours where accounts@thegourmetgreek.com appears anywhere on the thread.",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM email_search_index WHERE TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), sentAt, HOUR) <= 24 AND accounts@thegourmetgreek.com IN UNNEST(allEmails) ORDER BY sentAt DESC LIMIT 1;",
        "translated_sdk_code": "docs = db.collection('email_search_index').where('sentAt', '>=', datetime.datetime.now() - datetime.timedelta(hours=24)).where('allEmails', 'array_contains', 'accounts@thegourmetgreek.com').order_by('sentAt', direction=firestore.Query.DESCENDING).limit(1).stream()",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "placeholder"
      }
    },
    {
      "index": 20,
      "question": "Show me the newest email that includes julie@lineagecoffee.com and accounts@toscant.co.za together.",
      "sdk_json": {
        "from_sql": "SELECT messageId, threadId, fromEmail, subject, sentAt, snippet FROM email_search_index WHERE 'julie' IN UNNEST(toPeople) AND 'accounts@toscant.co.za' IN UNNEST(toEmails) ORDER BY sentAt DESC LIMIT 1;",
        "translated_sdk_code": "docs = db.collection('email_search_index').where('toPeople', 'array_contains', 'julie').where('toEmails', 'array_contains', 'accounts@toscant.co.za').order_by('sentAt', direction=firestore.Query.DESCENDING).limit(1).get()",
        "target": "Firestore Python SDK",
        "double_checked": true,
        "model_used": "gpt-4o-mini",
        "timestamp": "placeholder"
      }
    }
  ]
}